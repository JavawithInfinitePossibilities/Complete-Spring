<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util = "http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
                           http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
                           http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                           http://www.springframework.org/schema/util
		                   http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	<batch:job id="employeeJob" job-repository="jobRepository">
		<batch:step id="step1" next="step2">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReader"
							 writer="xmlItemWriter" 
							 processor="itemProcessor"
							 commit-interval="10">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="step2" next="step3">
			<batch:tasklet>
				<batch:chunk reader="xmlItemReader"
							 writer="cvsFileItemWriter" 
							 processor="itemProcessor"
							 commit-interval="20">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="step3" next="step4">
            <batch:tasklet>
                <batch:chunk reader="xmlReader"
                             writer="mysqlItemWriter"
                             commit-interval="5">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="step4" next="step5">
            <batch:tasklet>
                <batch:chunk reader="cvsFileItemReader"
                             writer="mysqlItemWriter"
                             commit-interval="10">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="step5" next="step6">
            <batch:tasklet>
                <batch:chunk reader="mysqlItemReader"
                             writer="itemWriter"
                             commit-interval="5"/>
            </batch:tasklet>
        </batch:step>
        <batch:step id="step6">
            <batch:tasklet>
                <batch:chunk reader="mysqlItemReader"
                             writer="flatFileItemWriter"
                             commit-interval="1"/>
            </batch:tasklet>
        </batch:step>
	</batch:job>

	<!-- Step 1 -->
	<bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="classpath:input/employee.csv" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="${app.csv.head.name}" />
					</bean>
				</property>
				<property name="fieldSetMapper" ref="fieldSetMapper">
					<!-- <bean class="com.tutorials.spring.batch.basic.mapper.EmployeeFieldSetMapper"/> -->

					<!-- if no data type conversion, use BeanWrapperFieldSetMapper to map 
						by name <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"> 
						<property name="prototypeBeanName" value="employee" /> </bean> -->
				</property>
			</bean>
		</property>
	</bean>
	<bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
		<property name="resource" value="file:src/main/resources/output/employee.xml" />
		<property name="marshaller" ref="reportMarshaller" />
		<property name="rootTagName" value="employees" />
	</bean>
	<bean id="reportMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="classesToBeBound">
			<list>
				<value>com.tutorials.spring.batch.basic.bean.Employee</value>
			</list>
		</property>
	</bean>
	
	<!-- Step 2 -->
	<bean id="xmlItemReader" class="org.springframework.batch.item.xml.StaxEventItemReader">
		<property name="fragmentRootElementName" value="employee" />
		<property name="resource" value="classpath:input/employee.xml" />
		<property name="unmarshaller" ref="reportMarshaller" />
	</bean>
	<bean id="cvsFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="file:src/main/resources/output/employee.csv" />
		<property name="shouldDeleteIfExists" value="true" />
		<property name="lineAggregator">
			<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="${app.csv.head.name}" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="xmlReader" class="org.springframework.batch.item.xml.StaxEventItemReader">
		<property name="fragmentRootElementName" value="employee" />
		<property name="resource" value="classpath:input/employee.xml" />
		<property name="unmarshaller" ref="employeeUnmarshaller" />
	</bean>
	<bean id="employeeUnmarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
        <property name="aliases">
        		<util:map>
        			<entry key="employee" value="com.tutorials.spring.batch.basic.bean.model.EmployeeModel"/>
        		</util:map>
        </property>
        <property name="converters">
            <array>
                <ref bean="employeeConverter" />
            </array>
        </property>
    </bean>
    <!-- <bean id="employeeConverter" class="com.tutorials.spring.batch.basic.converter.EmployeeConverter" /> -->
	<bean id="mysqlItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql" value="${app.mysql.query}"/>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
        </property>
    </bean>
    
    <!-- Step 5 -->
    <bean id="mysqlItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader" scope="step">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql" value="${app.db.mysql.query}"/>
        <property name="rowMapper">
            <bean class="com.tutorials.spring.batch.basic.mapper.EmployeeRowMapper"/>
        </property>
    </bean>
    <bean id="itemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
        <property name="resource" value="file:src/main/resources/output/employee_DB_xml.xml"/>
        <property name="marshaller" ref="employeeDBUnmarshaller"/>
        <property name="rootTagName" value="employee"/>
    </bean>
    <bean id="employeeDBUnmarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
        <property name="aliases">
            <util:map id="aliases">
                <entry key="employee" value="com.tutorials.spring.batch.basic.bean.model.EmployeeModel"/>
            </util:map>
        </property>
    </bean>
    
    <!-- Step 6 -->
    <!-- csv file writer -->
    <bean id="flatFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
        <property name="shouldDeleteIfExists" value="false" />
        <property name="resource" value="file:src/main/resources/output/employee_DB_CSV.csv"/>
        <property name="appendAllowed" value="true"/>
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="delimiter" value=","/>
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names" value="${app.file.csv.header.name}"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
</beans>